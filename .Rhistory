kable(sbg %>% group_by(reportable) %>% dplyr::summarize(count = n_distinct(assignment)), align = c("l", "c"))
library(knitr)
kable(sbg %>%
group_by(reportable) %>%
dplyr::summarize(count = n_distinct(assignment)),
align = c("l", "c")) %>%
kable_styling(position = "center")
library(kableExtra)
library(knitr)
library(kableExtra)
kable(sbg %>%
group_by(reportable) %>%
dplyr::summarize(count = n_distinct(assignment)),
align = c("l", "c")) %>%
kable_styling(position = "center")
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
# Import function for converting and formatting Google Classroom grade data
# from Google Sheet into standards based graedes.
source("~/GitHub/sbg/sbg.R")
# Google Classroom grade data from Google Sheet.
fname1 <- "~/GitHub/sbg/Copy of Grades Applied Digital Skills G Block 2019-2020 S2 04-17-2020 - Sheet0.csv"
# List of assignments by reportable.
fname2 <- "~/GitHub/sbg/Reportables S2 2019 - SBG - G.csv"
# Apply function.
sbg <- sbg(fname1, fname2)
library(knitr)
library(kableExtra)
kable(sbg %>%
group_by(reportable) %>%
dplyr::summarize(count = n_distinct(assignment)),
align = c("l", "c")) %>%
kable_styling(position = "center")
ggplot(sbg %>% filter(reportable !=  ""), aes(x = date, y = score)) +
geom_point(aes(color=reportable)) +
geom_smooth(method="loess", se=F) +
facet_wrap(name ~ .) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
studentAvg <-
sbg %>%
dplyr::summarize(average = mean(score, na.rm=T)) %>%
mutate(mastery = case_when(
average >= 3.5 ~ "Exceeding",
average >= 2.5 ~ "Meeting",
average >= 1.5 ~ "Approaching",
average <  1.5 ~ "Beginning"))
DT::datatable(studentAvg)
# Total percentage score of assignments with reportables.
awr <- sbg %>%
group_by(name) %>%
filter(reportable != "") %>%
dplyr::summarize(pScore = mean(relScore, na.rm=T)) %>%
mutate(mastery = case_when(
pScore >= 3.5/4 ~ "Exceeding",
pScore >= 2.5/4 ~ "Meeting",
pScore >= 1.5/4 ~ "Approaching",
pScore <  1.5/4 ~ "Beginning")) %>%
arrange(desc(pScore))
library(Hmisc)
masteryBins <- cut2(awr$pScore, c(0.5/4, 1.5/4, 2.5/4, 3.5/4, 4.0/4))
ggplot(awr %>% mutate(name = fct_reorder(name, pScore)), aes(pScore, name, color=masteryBins)) +
geom_point() +
geom_segment( aes(yend=name, xend=0))
kable(awr)
library(ggrepel)
classroomAvg <-
sbg %>%
group_by(name) %>%
dplyr::summarize(average = mean(score, na.rm=T)) %>%
arrange(desc(average)) %>%
mutate(mastery = case_when(
average >= 3.5 ~ "Exceeding",
average >= 2.5 ~ "Meeting",
average >= 1.5 ~ "Approaching",
average <  1.5 ~ "Beginning"),
average = average/4.0)
masteryBins <- cut2(classroomAvg$average, c(0.5/4.0, 1.5/4.0, 2.5/4.0, 3.5/4.0, 4.0/4.0))
ggplot(classroomAvg %>%
mutate(mastery = fct_reorder(mastery, average)), aes(average, mastery, color = masteryBins)) +
geom_point() +
geom_label_repel(aes(label = name),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50')
trueAvg <-
awr %>%
mutate(masteryTrue = case_when(
pScore >= 3.5/4.0 ~ "Exceeding",
pScore >= 2.5/4.0 ~ "Meeting",
pScore >= 1.5/4.0 ~ "Approaching",
pScore <  1.5/4.0 ~ "Beginning")) %>%
rename(trueAverage =  pScore)
biasedAvg <-
classroomAvg %>%
rename(masteryBiased = mastery) %>%
mutate(biasedAverage = average) %>%
select(-average)
avgCorr <- left_join(trueAvg, biasedAvg)
masteryBins <- cut2(avgCorr$trueAverage, c(0.5/4, 1.5/4, 2.5/4, 3.5/4, 4.0/4))
ggplot(avgCorr, aes(trueAverage, biasedAverage, color = masteryBins)) +
geom_point() +
geom_label_repel(aes(label = name),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
geom_abline(slope = 1, intercept = 0, linetype = 5)
# Below code doesn't always work since not all mastery levels will always have data.
#
# ggplot(avgCorr %>%
#          mutate(masteryBiased = fct_reorder(masteryBiased, biasedAverage) ,
#                 masteryTrue   = fct_reorder(masteryTrue,   trueAverage  )),
#          aes(masteryTrue, masteryBiased)) +
#          geom_point() +
#          geom_label_repel(aes(label = name),
#                   box.padding   = 0.35,
#                   point.padding = 0.5,
#                   segment.color = 'grey50') +
#          geom_abline(slope = 1.0, intercept = 0, linetype = 5)
nn <- plyr::ddply(studentAvg, "reportable", transform, avg_mean  = mean(average))
ggplot(studentAvg, aes(average)) +
geom_histogram() +
geom_vline(aes(xintercept = avg_mean), data = nn, linetype = 5) +
facet_grid(reportable ~ .)
kable(nn %>% select(reportable, average = avg_mean) %>% distinct(reportable, average))
library(Hmisc)
masteryBins <- cut2(awr$pScore, c(0.5/4, 1.5/4, 2.5/4, 3.5/4, 4.0/4))
ggplot(awr %>% mutate(name = fct_reorder(name, pScore)), aes(pScore, name, color=masteryBins)) +
geom_point() +
geom_segment( aes(yend=name, xend=0))
kable(awr, align = c("l", "c", "l")) %>%
kable_styling(position = "center")
kable(nn %>%
select(reportable, average = avg_mean) %>%
distinct(reportable, average),
align = c("l", "c")) %>%
kable_styling(position = "center")
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(tidyverse)
library(plotly)
library(weathermetrics)
# Heat limited data import and formatting.
hlp <-
tbl_df(read.csv("~/Downloads/Heat limited pace comparison with BKK summer running data - Temp _ Humidity _ Pace.csv",
stringsAsFactors = F)) %>%
pivot_longer(-T.H, names_to = "humidity", values_to = "pace") %>%
rename(temp = T.H) %>%
mutate(type = "limit")
hlp$humidity <- str_remove(hlp$humidity, "X")
hlp$temp <- as.numeric(hlp$temp)
hlp$humidity <- as.numeric(hlp$humidity)
hlp$pace <- as.numeric(hlp$pace)
# Sample of my running data from runs in BKK during Summer 2020.
data  <-
tribble(
~temp,	~humidity,	~pace, ~type,
91,	67,	8.45, "myData",
90,	65,	8, "myData",
94,	56,	8.583333333, "myData",
95,	54,	9.266666667, "myData",
91,	70,	8.55, "myData",
88,	70,	8.466666667, "myData",
92,	57,	8.533333333, "myData",
97,	51,	8.433333333, "myData"
)
# Combine datasets.
plotData <- bind_rows(hlp, data)
# 3D scatterplot of data.
fig <- plot_ly(type = 'scatter3d',
x = plotData$temp,
y = plotData$humidity,
z = plotData$pace,
color = plotData$type,
text = paste("Make: ", plotData$type,
"<br>Temp: ", plotData$temp,
"<br>Humidity: ", plotData$humidity,
# Heat index formula from weathermetrics library (based on NOAA algorithm)
"<br>Heat Index: ", heat.index(plotData$temp, rh=plotData$humidity),
"<br>Pace: ", plotData$pace),
hoverinfo = 'text'
)
fig %>% layout(
title = "Actual heat limited pace as calculated on fellrnr's wiki page compared to\na sample of my running data.",
scene = list(
xaxis = list(title = "Temperature (F)"),
yaxis = list(title = "Humidity (%)"),
zaxis = list(title = "Pace (min.mi")
))
byHI <-
plotData %>% mutate(heatIndex = ifelse(pace != is.na(pace), heat.index(temp, rh=humidity))) %>%
select(type, temp, humidity, heatIndex, pace)
ggplot(byHI, aes(heatIndex, pace, color = type)) +
geom_point() +
theme(legend.position="bottom") +
labs(title =
"Actual heat limited pace as calculated on fellrnr's wiki page compared to\na sample of my running data.",
x = "Heat Index (F)",
y = "Pace (min/mi)"
)
library(Hmisc)
ggplot(byHI %>% filter(humidity > 40), aes(temp, pace, color = type)) +
geom_point() +
facet_wrap(~cut2(humidity, c(50, 60, 70, 80, 90, 100))) +
theme(legend.position="bottom") +
labs(title =
"Actual heat limited pace as calculated on fellrnr's wiki page compared to\na sample of my running data.",
subtitle = "Groupings by humidity (%)",
x = "Temperature (F)",
y = "Pace (min/mi)"
)
# Fit full model.
heatPaceLOESS <- loess(pace ~ temp + humidity, data = byHI %>% filter(type == "limit"))
library(mgcv)
heatPaceGAM <-
gam(pace ~
# Set the cubic spline as the basis function bs='cr'
# and also not have it penalized with fx=TRUE.
# Both options are set for a smooth term that is set with s().
s(temp, bs = 'cr', k = 4, fx = TRUE) +
s(humidity, bs = 'cr', k = 4, fx = TRUE),
data = byHI %>% filter(type == "limit"))
library(splines)
heatPaceSpline <- lm(pace ~ bs(temp, knots = 7) + bs(humidity, knots = 7), data = byHI %>% filter(type == "limit"))
library(rpart)
heatPacePART <- rpart(pace ~ temp + humidity, data = byHI %>% filter(type == "limit"))
library(DiceKriging)
forKM <-
byHI %>%
filter(type == "limit" & pace != is.na(pace)) %>%
select(temp, humidity, pace)
heatPaceKM <-
km( ~ temp + humidity,
design =
forKM %>% select(temp, humidity),
response =
forKM %>% select(pace)
)
library(lookupTable)
heatPaceLT <-
lookupTable(forKM %>% select(temp, humidity, pace),
'pace',
feature.boundaries =
list(c(-50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100),
c(-50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100)
),
features.con =
c('temp', 'humidity')
)
# Function for returning km response values for mutate calls.
heatLimPace <- function(T, H) {
predict(heatPaceKM, data.frame(temp=c(T), humidity=c(H)), type = "UK")$mean
}
# Add model predictions to dataframe for comparison.
library(modelr)
deltas <-
byHI %>%
add_predictions(heatPaceLOESS, var = "predLOESS") %>%
add_predictions(heatPaceGAM, var = "predGAM") %>%
add_predictions(heatPaceSpline, var = "predSpline") %>%
add_predictions(heatPacePART, var = "predPART") %>%
add_predictions(heatPaceLT, var = "predLT") %>%
# Implementation for kriging model from DiceKriging lib.
mutate(predKM = heatLimPace(temp, humidity)) %>%
mutate(LOESS  = pace - predLOESS,
GAM    = pace - predGAM,
Spline = pace - predSpline,
PART   = pace - predPART,
LT     = pace - predLT,
KM     = pace - predKM
)
plotPreds <-
deltas %>%
filter(type == "limit") %>%
select(temp, humidity, pace:predKM) %>%
rename(actual = pace)
longPreds <-
pivot_longer(plotPreds, actual:predKM, names_to = "type", values_to = "pred")
ggplot(longPreds, aes(temp, pred, color = type)) +
geom_line() +
facet_wrap(~cut2(humidity, c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)), scales = "free_y") +
theme(legend.position="bottom") +
labs(title = "Actual and predicted heat limited pace from multivariate regression models.",
subtitle = "Groupings by humidity (%)",
x = "Temperature (F)",
y = "Pace (min/mi)"
)
library(gghighlight)
ggplot(longPreds, aes(temp, pred, color = type)) +
geom_line() +
facet_wrap(~cut2(humidity, c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)), scales = "free_y") +
theme(legend.position="bottom") +
gghighlight(type == "actual",
calculate_per_facet = T,
use_direct_label = F
) +
labs(title = "Actual heat limited pace compared to multivariate regression models.",
subtitle = "Groupings by humidity (%)",
x = "Temperature (F)",
y = "Pace (min/mi)"
)
ggplot(longPreds, aes(temp, pred, color = type)) +
geom_line() +
facet_wrap(~cut2(humidity, c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)), scales = "free_y") +
theme(legend.position="bottom") +
gghighlight(type == "actual" | type == "predKM" | type == "predGAM",
calculate_per_facet = T,
use_direct_label = F
) +
labs(title = "Actual and predicted heat limited pace from multivariate regression models.",
subtitle = "Groupings by humidity (%)",
x = "Temperature (F)",
y = "Pace (min/mi)"
)
source("~/GitHub/myBlog/content/resources/2020-03-27-100-lap-challenge/100LapChallengePrepare.R")
bkkSummer20 <- getHLP()
plotBKKSumm20 <-
bkkSummer20 %>%
group_by(Date) %>%
summarise(Temp = mean(Temp),
Humidity = mean(humidity),
HeatIndex = mean(heatIndex),
Pace = mean(Avg.Pace),
RPI = mean(RPI)
) %>%
mutate(HeatLimitPace = heatLimPace(Temp, Humidity),
Violation = ifelse(Pace < HeatLimitPace, TRUE, FALSE)
) %>%
select(Date:Pace, HeatLimitPace, Violation, RPI)
ggplot(plotBKKSumm20, aes(Date, RPI, color = Violation)) +
geom_point() +
theme(legend.position="bottom") +
gghighlight(Violation == TRUE,
calculate_per_facet = T,
use_direct_label = F
) +
labs(title = "BKK late Spring 2020 runs at Vadhana fixed track.",
subtitle = "Red points indicate when average pace faster than heat limited pace",
x = "Date",
y = "Running Performance Index"
)
plotBKKSumm20 %>% group_by(Violation) %>% summarise(mean(RPI))
library(tidyverse)
library(plotly)
library(weathermetrics)
# Heat limited data import and formatting.
hlp <-
tbl_df(read.csv("~/GitHub/myBlog/content/resources/2020-06-13-heat-training/Heat limited pace comparison with BKK summer running data - Temp _ Humidity _ Pace.csv",
stringsAsFactors = F)) %>%
pivot_longer(-T.H, names_to = "humidity", values_to = "pace") %>%
rename(temp = T.H) %>%
mutate(type = "limit")
hlp$humidity <- str_remove(hlp$humidity, "X")
hlp$temp <- as.numeric(hlp$temp)
hlp$humidity <- as.numeric(hlp$humidity)
hlp$pace <- as.numeric(hlp$pace)
# Sample of my running data from runs in BKK during Summer 2020.
data  <-
tribble(
~temp,	~humidity,	~pace, ~type,
91,	67,	8.45, "myData",
90,	65,	8, "myData",
94,	56,	8.583333333, "myData",
95,	54,	9.266666667, "myData",
91,	70,	8.55, "myData",
88,	70,	8.466666667, "myData",
92,	57,	8.533333333, "myData",
97,	51,	8.433333333, "myData"
)
# Combine datasets.
plotData <- bind_rows(hlp, data)
# 3D scatterplot of data.
fig <- plot_ly(type = 'scatter3d',
x = plotData$temp,
y = plotData$humidity,
z = plotData$pace,
color = plotData$type,
text = paste("Make: ", plotData$type,
"<br>Temp: ", plotData$temp,
"<br>Humidity: ", plotData$humidity,
# Heat index formula from weathermetrics library (based on NOAA algorithm)
"<br>Heat Index: ", heat.index(plotData$temp, rh=plotData$humidity),
"<br>Pace: ", plotData$pace),
hoverinfo = 'text'
)
fig %>% layout(
title = "Actual heat limited pace as calculated on fellrnr's wiki page compared to\na sample of my running data",
scene = list(
xaxis = list(title = "Temperature (F)"),
yaxis = list(title = "Humidity (%)"),
zaxis = list(title = "Pace (min.mi")
))
blogdown:::serve_site()
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "/Users/amrit/HealthData/DBs/garmin_activities.db")
# Get table
runningActs <- dbReadTable(con, 'running_activities_view')
# BKK Summer 2020 running activity IDs
bkkSummer20 <- runningActs$activity_id[2:22]
library(reticulate)
# use_condaenv("r-reticulate")
# py_install("fitparse", pip = TRUE)
# py_install("pytz", pip = TRUE)
# py_module_available("fitparse")
# py_module_available("pytz")
# This file converts Garmin .fit files to .csv files. Ran locally.
py_run_file("/Users/amrit/HealthData/FitFiles/vadhana/convert_fit_to_csv.py", local = T)
library(tidyverse)
library(data.table)
# Assign RHR.
# Based on average over dataset period.
RHR <- 58
# Basic importing, re-formatting and distance correction.
getData <- function(fname) {
run <- tbl_df(read.csv(fname, stringsAsFactors = F))
run <- run %>%
mutate(Laps = row_number(timestamp),
Time.Min = floor(total_elapsed_time / 60),
Time.Sec = total_elapsed_time - Time.Min  * 60,
Distance = total_distance / 1609,
# Distance correction.
Distance = ifelse(Distance < 0.08, 0.072, 2 * 0.072),
Avg.Pace = (Time.Min + Time.Sec / 60) / Distance,
Avg.HR = avg_heart_rate,
Max.HR = max_heart_rate,
RPI = 1 / (((Avg.HR - RHR) * (Time.Min + Time.Sec / 60)) / Distance) * 100000,
Cadence = (avg_running_cadence + avg_fractional_cadence) * 2,
Kcals = total_calories,
Temp = avg_temperature * 9 / 5 + 32,
Date = as.Date(timestamp)
) %>%
select(Laps:Date)
}
setwd("~/HealthData/FitFiles/vadhana")
# lapply + glob passes all .csv files to previously defined data import and formatting function.
data <- lapply(Sys.glob("~/HealthData/FitFiles/vadhana/*.csv"), getData)
# Combine created list data into a single dataframe.
bkkRunningSumm20 <- rbindlist(data) %>% filter(Date != "2020-04-21" | Laps != 51)
library(weathermetrics)
humidity  <-
tribble(
~Date,	~humidity,
"2020-03-24", 54,
"2020-03-25", 61,
"2020-03-27", 57,
"2020-03-30", 57,
"2020-04-07", 68,
"2020-04-10", 54,
"2020-04-14", 68,
"2020-04-16", 67,
"2020-04-19", 57,
"2020-04-21", 51,
"2020-04-24", 57,
"2020-04-27", 70,
"2020-04-30", 71,
"2020-05-05", 70,
"2020-05-07", 55,
"2020-05-10", 58,
"2020-05-15", 54,
"2020-05-20", 56,
"2020-05-24", 65,
"2020-05-26", 67
)
humidity$Date <- as.Date(humidity$Date)
bkkRunningSumm20 <-
left_join(bkkRunningSumm20, humidity) %>%
mutate(heatIndex = heat.index(Temp, rh=humidity))
# Change the data from "wide" to "long'
# to make plotting easier.
pltRunData <-
reshape2::melt(bkkRunningSumm20, id.vars = c("Date", "Laps"))
# Create a dataset of variable means.
meanData <- pltRunData %>%
# Mean data
group_by(Date, variable) %>%
summarise(avg = mean(value)) %>%
# Add a column for mean value
# plot position (y-coordinate)
left_join(pltRunData %>% group_by(variable) %>%
summarise(ypos = 0.95*max(value))) %>%
filter(variable == "Avg.HR" |
variable == "Avg.Pace" |
variable == "Cadence" |
variable == "heatIndex" |
variable == "RPI"
)
lessPlt <- pltRunData %>% filter(variable == "Avg.HR" |
variable == "Avg.Pace" |
variable == "Cadence" |
variable == "heatIndex" |
variable == "RPI"
)
lessMean <- meanData %>% filter(variable == "Avg.HR" |
variable == "Avg.Pace" |
variable == "Cadence" |
variable == "heatIndex" |
variable == "RPI"
)
ggplot(lessPlt, aes(x=Laps, y=value)) +
geom_hline(data=lessMean, aes(yintercept = avg), colour="red", lty=3) +
geom_text(data=lessMean,
aes(label=round(avg,1), x=62, y=ypos),
colour="red",
hjust=1,
size=3) +
xlim(c(1,65)) +
geom_line() +
facet_grid(Date ~ variable, scales = "free")
setwd("~/HealthData/FitFiles/vadhana")
# lapply + glob passes all .csv files to previously defined data import and formatting function.
data <- lapply(Sys.glob("~/HealthData/FitFiles/vadhana/*.csv"), getData)
# Combine created list data into a single dataframe.
bkkRunningSumm20 <- rbindlist(data) %>% filter(Date != "2020-04-21" | Laps != 51)
