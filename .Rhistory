from hbf.rescrape.getInput import getInput as getInput
(
StreetNumber,
StreetName,
AptNumber,
City,
State,
ZipCode,
SearchBoxHalfWidth,
RequestHeaders,
) = getInput("/Users/amrit/GitHub/Home-Buyer-Fire/res.inp")
print(
StreetNumber,
StreetName,
AptNumber,
City,
State,
ZipCode,
SearchBoxHalfWidth,
RequestHeaders,
)
blogdown:::preview_site(startup = TRUE)
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(reticulate)
use_python("/usr/local/bin/python3", required = TRUE)
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(reticulate)
use_python("/usr/local/bin/python3", required = TRUE)
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(reticulate)
use_python("/usr/local/bin/python3", required = TRUE)
# py_config()
# py_available(initialize = FALSE)
# conda_list()
py_module_available("hbf")
use_python("/usr/local/bin/python3", required = TRUE)
use_python("/usr/local/bin/python3", required = TRUE)
library(reticulate)
blogdown:::preview_site(startup = TRUE)
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(reticulate)
use_python("/usr/local/bin/python3", required = TRUE)
py$wheaton
py$wheaton
py$wheaton
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(reticulate)
use_python("/usr/local/bin/python3", required = TRUE)
# virtualenv_create("hbf")
# use_virtualenv("hbf")
# py_install("hbf", pip = TRUE, envname = "hbf")
# py_config()
# py_module_available("hbf")
# py_install("hbf")
reticulate::repl_python()
unlink("hbfDev.log")
wheatonScrape <- tibble(py$wheaton)
wheatonScrape
cat("res.inp")
cat(file = "res.inp")
cat(file = "./content/post/res.inp")
cat(file = "res.inp")
cat(file = "res.inp")
cat(file = "res.inp")
file.show("res.inp")
cat(readLines('res.inp'), sep = '\n')
cat(readLines('res.inp'), sep = '\n')
cat(readLines('res.inp'), sep = '\n')
cat(readLines('fit.dat'), sep = '\n')
cat(readLines("fit.dat"), sep = '\n')
cat(readLines("fit.dat"), sep = '\n')
cat(readLines("res.inp"), sep = '\n')
reticulate::repl_python()
unlink("hbfDev.log") # delete log file
py$wheaton
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
# Helper packages
library(readr)       # for importing data
library(broom.mixed) # for converting bayesian models to tidy tibbles
# saveRDS(wheatonScrape, file = "wheatonScrape.rds")
DCscrape <- readRDS(file = "wheatonScrape.rds")
DCscrape
new_points <- expand.grid(Beds = 2,
Baths = 2,
`Home Size` = c(1000, 2000, 3000),
`Year Built` = 1965,
`Lot Size` = 8000
)
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
new_points <- expand.grid(Beds = 2,
Baths = 2,
`Home Size` = c(1000, 2000, 3000),
`Year Built` = 1965,
`Lot Size` = 8000
)
new_points
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
conf_int_pred <- predict(lm_fit,
new_data = new_points,
type = "conf_int")
conf_int_pred
# Now combine:
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
# and plot:
ggplot(plot_data, aes(x = Beds)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(x = "beds", y = "sell price")
# Now combine:
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
# and plot:
ggplot(plot_data, aes(x = `Home Size`)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(x = "home size", y = "sell price")
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# 1. Define the ordinary least squares linear model engine.
lm_mod <-
linear_reg() %>% # from `parsnip`
set_engine("lm")
# 2. Estimate or train using the `fit()` function.
lm_fit <-
lm_mod %>%
fit(`Sell Price` ~ Beds + Baths + `Home Size` + `Year Built` + `Lot Size`,
data = DCscrape)
tidy(lm_fit)
new_points <- expand.grid(Beds = 2,
Baths = 2,
`Home Size` = c(1000, 2000, 3000),
`Year Built` = 1965,
`Lot Size` = 8000
)
new_points
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
conf_int_pred <- predict(lm_fit,
new_data = new_points,
type = "conf_int")
conf_int_pred
# Now combine:
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
# and plot:
ggplot(plot_data, aes(x = `Home Size`)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(x = "home size", y = "sell price")
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(`Sell Price` ~ Beds + Baths + `Home Size` + `Year Built` + `Lot Size`, data = DCscrape)
print(bayes_fit, digits = 5)
tidy(bayes_fit, conf.int = TRUE)
tidy(bayes_fit, conf.int = TRUE)
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = `Home Size`)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(x = "home size", y = "sell price") +
ggtitle("Bayesian model with t(1) prior distribution")
# set the prior distribution
prior_dist <- rstanarm::half-cauchy(location = 0, scale = 3)
# set the prior distribution
prior_dist <- rstanarm:cauchy(location = 0, scale = 3)
# set the prior distribution
prior_dist <- rstanarm::cauchy(location = 0, scale = 3)
# set the prior distribution
prior_dist <- rstanarm::cauchy(location = 0, scale = 3)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(`Sell Price` ~ Beds + Baths + `Home Size` + `Year Built` + `Lot Size`, data = DCscrape)
print(bayes_fit, digits = 5)
tidy(bayes_fit, conf.int = TRUE)
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = `Home Size`)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(x = "home size", y = "sell price") +
ggtitle("Bayesian model with t(1) prior distribution")
prior_dist <-
rstanarm::stan_glm(`Sell Price` ~ Beds + Baths + `Home Size` + `Year Built` + `Lot Size`,
data = DCscrape, chains = 1) # using default prior
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(`Sell Price` ~ Beds + Baths + `Home Size` + `Year Built` + `Lot Size`, data = DCscrape)
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
prior_dist
prior_summary(prior_dist)
rstanarm::prior_summary(prior_dist)
View(prior_dist)
prior_dist$prior.info$prior_intercept
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist$prior.info$prior_intercept,
prior =  prior_dist$prior.info$prior)
# train the model
bayes_fit <-
bayes_mod %>%
fit(`Sell Price` ~ Beds + Baths + `Home Size` + `Year Built` + `Lot Size`, data = DCscrape)
print(bayes_fit, digits = 5)
tidy(bayes_fit, conf.int = TRUE)
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = `Home Size`)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(x = "home size", y = "sell price") +
ggtitle("Bayesian model with t(1) prior distribution")
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = `Home Size`)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(x = "home size", y = "sell price") +
ggtitle("Bayesian model with default weekly informative prior distribution")
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
install.packages("miniUI")
blogdown:::serve_site()
blogdown::build_site()
blogdown::serve_site(local = TRUE)
blogdown::update_hugo()
blogdown:::preview_site(startup = TRUE)
blogdown::update_hugo()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
remotes::install_github('rstudio/blogdown')
blogdown:::preview_site(startup = TRUE)
blogdown::hugo_cmd('server')
blogdown::hugo_version()
blogdown::update_hugo()
blogdown:::preview_site(startup = TRUE)
blogdown::hugo_cmd('server')
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::hugo_cmd('server')
blogdown::hugo_cmd('server')
blogdown:::serve_site()
