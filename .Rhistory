jumpData
jumpData <
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time / 60)
bind_rows(datalist)
jumpData <
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time / 60)
bind_rows(datalist) %>%
filter(jumps > 0)
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time)
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time * 60)
jumpData <
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time * 60)
jumpData <-
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time * 60)
jumpData
ggplot(jumpData, aes(start_time, jpm)) +
geom_line()
ggplot(jumpData, aes(start_time, jpm)) +
geom_point()
ggplot(jumpData, aes(start_time, jpm)) +
geom_point(lm = "loess")
ggplot(jumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth()
ggplot(jumpData, aes(start_time, jpm)) +
geom_point()
ggplot(jumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth()
ggplot(jumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = FALSE)
ggplot(jumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 2), se = FALSE)
ggplot(jumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x,1), se = FALSE)
ggplot(jumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
jumpData
jumpData %>% select(-sub_sport, -name)
jumpData %>% select(-sub_sport, -name) %>% pivot_longer(-start_time)
pltjumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, jpm)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
pltJumpData
ggplot(pltJumpData, aes(start_time, vale)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData, aes(jpm, avg_heart_rate)) +
geom_point()
ggplot(jumpData, aes(jpm, avg_heart_rate)) +
geom_point()
jumpData
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate)) +
geom_point()
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text()
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text(check_overlap = TRUE)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_smooth() +
geom_text()
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text()
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_label()
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_label(hjust = 0, nudge_x = 0.05)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_label(vjust = 0, nudge_x = 0.05)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_label(vjust = 0, nudge_x = 0.1)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_label(vjust = 0, nudge_y = 0.05)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_label(hjust = 0, nudge_x = 0.05)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text(hjust = 0, nudge_x = 0.05)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text(vjust = 0, nudge_y = 0.5)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text(vjust = 0, nudge_y = 0.4)
ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
geom_point() +
geom_text(vjust = 0, nudge_y = 0.3)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData, aes(start_time, value)) +
geom_point(aes(size = jumps)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData, aes(start_time, value)) +
geom_point(aes(size = value)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
library(Hmisc)
ggplot(pltJumpData, aes(start_time, value, color = Hmisc::cut2(jumps, g = 2))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
pltJumpData %>% filter(value == jumps)
pltJumpData %>% filter(value == "jumps")
pltJumpData %>% filter(name == "jumps")
ggplot(pltJumpData, aes(start_time, value, color = Hmisc::cut2(pltJumpData %>% filter(name == "jumps"), g = 2))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData, aes(start_time, value, color = Hmisc::cut2(value, g = 2))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(pltJumpData %>% filter(name == "jumps" | name == "jpm"), aes(start_time, value, color = Hmisc::cut2(value, g = 2))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
jumpData
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, g = 2))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(500)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(505)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(1001)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y")
ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
# ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
#   geom_point() +
#   geom_text(vjust = 0, nudge_y = 0.3)
ggplot(jumpData, aes(start_time, average_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth()
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
scale_fill_discrete(name = "Jumps")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
theme(legend.title = "Jumps")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
+ theme(legend.title = element_title("Jumps"))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)",
fill = "Jumps")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
scale_fill_discrete(name="Experimental\nCondition")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
scale_fill_manual(name="Experimental\nCondition")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
guide_legend(title = "Jumps")
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
guides(fill = guide_legend(title = "Jumps"))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
guides(shape = guide_legend("title"))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)") +
guides(guide_legend("title"))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)",
color='NEW LEGEND TITLE')
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)",
color = "Jumps")
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = "Summary of jump rope session data",
x = "Date",
y = "Value")
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = "Summary of jump rope session data",
x = "Date",
y = "Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(DBI)
library(RSQLite)
library(tidyverse)
# Setup a working directory to copy files to for processing.
workDir <- "~/HealthData/FitFiles/working/"
# setwd(workDir)
con <- dbConnect(SQLite(), "/Users/amrit/HealthData/DBs/garmin_activities.db")
# dbListTables(con)
acts <- dbReadTable(con, 'activities')
# Path of the SQLite activities database.
path <- "/Users/amrit/HealthData/FitFiles/Activities/"
# Get .fit filenames based on running activity names.
cardio <-
acts %>%
filter(sub_sport == "cardio_training") %>%
arrange(desc(start_time)) %>%
# Allow partial activity date matching.
filter(str_detect(start_time, "2020-")) %>%
select(start_time, activity_id) %>%
mutate(activity_id = paste0(path, activity_id, ".fit"))
save(cardio, file = "~/HealthData/FitFiles/working/cardio.Rdata")
# Copy .fit files to working directory.
lapply(paste("cp", cardio$activity_id, workDir), system)
library(reticulate)
virtualenv_create("jumps")
py_install("fitparse", envname = "jumps")
use_virtualenv("jumps")
getFitOut <- function() {
py_capture_output(py_run_string("import fitparse
# Load the FIT file
fitfile = fitparse.FitFile(r.fitFile)
# Iterate over all messages of type \"record\"
# (other types include \"device_info\", \"file_creator\", \"event\", etc)
for record in fitfile.get_messages(\"session\"):
# Records can contain multiple pieces of data (ex: timestamp, latitude, longitude, etc)
for data in record:
# Print the name and value of the data (and the units if it has any)
if data.units:
print(\"{}, {}, {}\".format(data.name, data.value, data.units))
else:
print(\"{}, {}, NA\".format(data.name, data.value))
"))
}
getJumpData <- function(jumpFit) {
# Run python file created by @mcandocia on GitHub @ https://github.com/mcandocia/examples/tree/master/convert_fit_to_csv
# to convert .fit data to .csv to allow for processing in R.
# source_python("jumps.py", envir = NULL)
jump <- read_csv(jumpFit, col_name = c('type', 'value', 'units'))
jump %>%
filter(
type == "unknown_110" |
type == "Jumping Effect" |
type == "Jumps" |
type == "avg_heart_rate" |
type == "max_heart_rate" |
type == "avg_temperature" |
type == "max_temperature" |
type == "start_time" |
type == "sub_sport" |
type == "total_anaerobic_training_effect" |
type == "total_training_effect" |
type == "total_calories" |
type == "total_elapsed_time"
) %>%
select(type, value) %>%
pivot_wider(names_from = type) %>%
type_convert(col_types = cols(.default = col_double(),
start_time = col_datetime(),
sub_sport = col_character(),
unknown_110 = col_character()
)
) %>%
rename(name = unknown_110,
jumpingEffect = "Jumping Effect",
jumps = Jumps
)
}
passFit <- function() {
getJumpData(getFitOut())
}
datalist = list()
for (i in 1:length(cardio$activity_id)) {
fitFile <- cardio$activity_id[i]
dat <- passFit()
datalist[[i]] <- dat
}
jumpData <-
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time * 60)
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = "Summary of jump rope session data",
x = "Date",
y = "Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth() +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)",
color = "Jumps")
# ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(501)))) +
#   geom_point() +
#   geom_smooth(method = lm, se = FALSE)
# ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
#   geom_point() +
#   geom_text(vjust = 0, nudge_y = 0.3)
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = "Summary of jump rope session data",
x = "Date",
y = "Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min. of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)",
color = "Jumps")
# ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(501)))) +
#   geom_point() +
#   geom_smooth(method = lm, se = FALSE)
# ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
#   geom_point() +
#   geom_text(vjust = 0, nudge_y = 0.3)
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = "Summary of jump rope session data",
x = "Date",
y = "Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(jumpData, aes(start_time, avg_heart_rate, color = Hmisc::cut2(jumps, cuts = c(501)))) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
labs(title = "Change in cardio fitness over time from jumping rope",
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)",
color = "Jumps")
# ggplot(jumpData, aes(start_time, jpm, color = Hmisc::cut2(jumps, cuts = c(501)))) +
#   geom_point() +
#   geom_smooth(method = lm, se = FALSE)
# ggplot(jumpData %>% filter(jumps >= 500), aes(jpm, avg_heart_rate, label = jumps)) +
#   geom_point() +
#   geom_text(vjust = 0, nudge_y = 0.3)
blogdown:::serve_site()
blogdown:::serve_site()
