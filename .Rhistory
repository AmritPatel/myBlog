type == "total_anaerobic_training_effect" |
type == "total_training_effect" |
type == "total_calories" |
type == "total_elapsed_time"
) %>%
select(type, value) %>%
pivot_wider(names_from = type) %>%
type_convert(col_types = cols(.default = col_double(),
start_time = col_datetime(),
sub_sport = col_character(),
unknown_110 = col_character()
)
) %>%
rename(name = unknown_110,
jumpingEffect = "Jumping Effect",
jumps = Jumps
)
}
passFit <- function() {
getJumpData(getFitOut())
}
datalist = list()
for (i in 1:length(cardio$activity_id)) {
fitFile <- cardio$activity_id[i]
dat <- passFit()
datalist[[i]] <- dat
}
jumpData <-
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time * 60)
# Determine number of days in a row with a 10 min. jump rope session. Multiple entries per day should be excluded.
sessions <- unique(format(jumpData$start_time, "%A, %B %d, %Y"))
library(glue) # for convenient string/var concatenation
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = glue("Summary of jump rope session data over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Date",
y = "Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(kableExtra)
jumpData %>%
summarise(totalJumps = sum(jumps),
totalCalories = sum(total_calories)
) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
# Plot of avg. HR data over time.
library(plotly)
jumpGroup <- Hmisc::cut2(jumpData$jumps, cuts = c(501))
p <-
ggplot(jumpData, aes(start_time, avg_heart_rate, color = jumpGroup,
label  = jumps,
label2 = jpm,
label3 = max_heart_rate,
label4 = total_training_effect,
label5 = jumpingEffect
)
) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
# geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)")
ggplotly(p) %>%
layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
'<br>',
'<sup>',
"Goal is min of 10 min. continuous jumping per session",
'</sup>')))
# Plot of jpm data.
q <-
ggplot(jumpData, aes(avg_heart_rate, jpm, color = jumpGroup,
label  = jumps,
label2 = start_time,
label3 = max_heart_rate,
label4 = total_training_effect,
label5 = jumpingEffect
)
) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
# geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Average heart rate (bpm)",
y = "Jumps per minute")
ggplotly(q) %>%
layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
'<br>',
'<sup>',
"Goal is min of 10 min. continuous jumping per session",
'</sup>')))
# Plot of jpm data.
library(gghighlight)
#library(ggrepel)
q <-
ggplot(jumpData, aes(jpm, avg_heart_rate, color = start_time,
# label  = jumps,
# label = start_time,
# label3 = max_heart_rate,
# label4 = total_training_effect
# label5 = jumpingEffect
)
) +
geom_point() +
#geom_smooth(method = lm, se = FALSE) +
#gghighlight(jpm >= 130) +
#geom_text(vjust = 0, nudge_y = 1.0) +
# geom_text_repel(aes(label = as.character(start_time)),
#                  box.padding   = 0.35,
#                  point.padding = 0.5,
#                  segment.color = 'grey50'
# ) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
y = "Average heart rate (bpm)",
x = "Jumps per minute",
color = "Date")
q
# ggplotly(q) %>%
# layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
#                                   '<br>',
#                                   '<sup>',
#                                   "Goal is min of 10 min. continuous jumping per session",
#                                   '</sup>')))
# Plot avg HR vs. number of jumps colored by time.
r <-
ggplot(jumpData, aes(jumps, avg_heart_rate, color = start_time#,
# label  = jpm,
# label2 = start_time,
# label3 = max_heart_rate,
# label4 = total_training_effect,
# label5 = jumpingEffect
)
) +
geom_point() +
gghighlight(jumps >= 1000) +
geom_smooth(method = lm, se = FALSE) +
# geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Sessions with higher number of jumps highlighted",
x = "Jumps",
y = "Average heart rate (bpm)",
color = "Date")
r
# ggplotly(r) %>%
# layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
#                                   '<br>',
#                                   '<sup>',
#                                   "Sessions with higher number of jumps highlighted",
#                                   '</sup>')))
# Plot avg HR vs. jumping efficiency colored by time.
s <-
ggplot(jumpData, aes(jumpingEffect, avg_heart_rate, color = start_time,
label  = jpm,
label2 = max_heart_rate,
label3 = total_training_effect)) +
geom_point() +
#gghighlight(jumpingEffect >= 20) +
#geom_smooth(method = lm, se = FALSE) +
#geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
#subtitle = "Jumping effect data >= 20 highlighted",
x = "Jumping Effect",
y = "Average heart rate (bpm)",
color = "Date")
ggplotly(s) %>%
layout(title = list(text = glue("Change in cardio fitness over time from jumping rope over {length(sessions)} days",
'<br>',
'<sup>',
#"Jumping effect data >= 20 highlighted",
'</sup>'))
)
# Load in all helper functions
source("~/GitHub/myBlog/content/resources/2020-06-14-heat-training-continues-in-hua-hin/RPIandHeatLimitedPacePlots.R")
# Lalitpur Running
dataLalitpur <- getRPIandHLPfromFIT(wd = "~/HealthData/FitFiles/working/", aname = "Lalitpur")
cleanup()
humidity  <-
tribble(
~Date,	~humidity,
"2020-01-12", 93,
"2020-08-10", 89,
"2020-08-11", 100,
"2020-08-13", 100,
"2020-08-16", 100,
"2020-08-18", 100
)
dataLalitpur <- addHI(dataLalitpur, humidity)
plotRPI(dataLalitpur %>% filter(Date > "2020-08-01"), titleText = "Lalitpur Summer 2020 training runs.")
dataLalitpur %>%
filter(Date > "2020-08-01") %>%
group_by(Date) %>%
summarise(AvgRPI = round(mean(RPI, na.rm = T))) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
library(kableExtra)
jumpData %>%
summarise(totalJumps = sum(jumps),
totalCalories = sum(total_calories)
) %>%
bind_cols(length(sessions)) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
library(kableExtra)
jumpData %>%
summarise(totalJumps = sum(jumps),
totalCalories = sum(total_calories)
) %>%
bind_cols(Days = length(sessions)) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
library(kableExtra)
bind_cols(Days = length(sessions),
jumpData %>%
summarise(totalJumps = sum(jumps),
totalCalories = sum(total_calories)
)
) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
# Summary of running totals
library(kableExtra)
bind_cols(Days = length(sessions),
jumpData %>%
summarise(totalJumps = sum(jumps),
totalCalories = sum(total_calories)
)
) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
blogdown:::serve_site()
knitr::opts_chunk$set(echo = F, message = F, warning = F, fig.align = "center")
library(reticulate)
virtualenv_create("jumps")
py_install("fitparse", envname = "jumps")
use_virtualenv("jumps")
library(DBI)
library(RSQLite)
library(tidyverse)
# Setup a working directory to copy files to for processing.
workDir <- "~/HealthData/FitFiles/working/"
# setwd(workDir)
con <- dbConnect(SQLite(), "/Users/amrit/HealthData/DBs/garmin_activities.db")
# dbListTables(con)
acts <- dbReadTable(con, 'activities')
# Path of the SQLite activities database.
path <- "/Users/amrit/HealthData/FitFiles/Activities/"
# Get .fit filenames based on running activity names.
cardio <-
acts %>%
filter(sub_sport == "cardio_training") %>%
arrange(desc(start_time)) %>%
# Allow partial activity date matching.
filter(str_detect(start_time, "2020-")) %>%
select(start_time, activity_id) %>%
mutate(activity_id = paste0(path, activity_id, ".fit"))
save(cardio, file = "~/HealthData/FitFiles/working/cardio.Rdata")
# Copy .fit files to working directory.
walk(paste("cp", cardio$activity_id, workDir), system) # same as lapply w/ no output printed
getFitOut <- function() {
library(reticulate)
py_capture_output(py_run_string("import fitparse
# Load the FIT file
fitfile = fitparse.FitFile(r.fitFile)
# Iterate over all messages of type \"record\"
# (other types include \"device_info\", \"file_creator\", \"event\", etc)
for record in fitfile.get_messages(\"session\"):
# Records can contain multiple pieces of data (ex: timestamp, latitude, longitude, etc)
for data in record:
# Print the name and value of the data (and the units if it has any)
if data.units:
print(\"{}, {}, {}\".format(data.name, data.value, data.units))
else:
print(\"{}, {}, NA\".format(data.name, data.value))
"))
}
getJumpData <- function(jumpFit) {
# Run python file created by @mcandocia on GitHub @ https://github.com/mcandocia/examples/tree/master/convert_fit_to_csv
# to convert .fit data to .csv to allow for processing in R.
# source_python("jumps.py", envir = NULL)
jump <- read_csv(jumpFit, col_name = c('type', 'value', 'units'))
jump %>%
filter(
type == "unknown_110" |
type == "Jumping Effect" |
type == "Jumps" |
type == "avg_heart_rate" |
type == "max_heart_rate" |
type == "avg_temperature" |
type == "max_temperature" |
type == "start_time" |
type == "sub_sport" |
type == "total_anaerobic_training_effect" |
type == "total_training_effect" |
type == "total_calories" |
type == "total_elapsed_time"
) %>%
select(type, value) %>%
pivot_wider(names_from = type) %>%
type_convert(col_types = cols(.default = col_double(),
start_time = col_datetime(),
sub_sport = col_character(),
unknown_110 = col_character()
)
) %>%
rename(name = unknown_110,
jumpingEffect = "Jumping Effect",
jumps = Jumps
)
}
passFit <- function() {
getJumpData(getFitOut())
}
datalist = list()
for (i in 1:length(cardio$activity_id)) {
fitFile <- cardio$activity_id[i]
dat <- passFit()
datalist[[i]] <- dat
}
jumpData <-
bind_rows(datalist) %>%
filter(jumps > 0) %>%
mutate(jpm = jumps / total_elapsed_time * 60)
# Determine number of days in a row with a 10 min. jump rope session. Multiple entries per day should be excluded.
sessions <- unique(format(jumpData$start_time, "%A, %B %d, %Y"))
library(glue) # for convenient string/var concatenation
pltJumpData <-
jumpData %>%
select(-sub_sport, -name) %>%
pivot_longer(-start_time)
ggplot(pltJumpData, aes(start_time, value)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ name, scales = "free_y") +
labs(title = glue("Summary of jump rope session data over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Date",
y = "Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summary of jumping totals
library(kableExtra)
bind_cols(Days = length(sessions),
jumpData %>%
summarise(totalJumps = sum(jumps),
totalCalories = sum(total_calories)
)
) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
# Plot of avg. HR data over time.
library(plotly)
jumpGroup <- Hmisc::cut2(jumpData$jumps, cuts = c(501))
p <-
ggplot(jumpData, aes(start_time, avg_heart_rate, color = jumpGroup,
label  = jumps,
label2 = jpm,
label3 = max_heart_rate,
label4 = total_training_effect,
label5 = jumpingEffect
)
) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
# geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Date",
y = "Average heart rate (bpm)")
ggplotly(p) %>%
layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
'<br>',
'<sup>',
"Goal is min of 10 min. continuous jumping per session",
'</sup>')))
# Plot of jpm data.
q <-
ggplot(jumpData, aes(avg_heart_rate, jpm, color = jumpGroup,
label  = jumps,
label2 = start_time,
label3 = max_heart_rate,
label4 = total_training_effect,
label5 = jumpingEffect
)
) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
# geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
x = "Average heart rate (bpm)",
y = "Jumps per minute")
ggplotly(q) %>%
layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
'<br>',
'<sup>',
"Goal is min of 10 min. continuous jumping per session",
'</sup>')))
# Plot of jpm data.
library(gghighlight)
#library(ggrepel)
q <-
ggplot(jumpData, aes(jpm, avg_heart_rate, color = start_time,
# label  = jumps,
# label = start_time,
# label3 = max_heart_rate,
# label4 = total_training_effect
# label5 = jumpingEffect
)
) +
geom_point() +
#geom_smooth(method = lm, se = FALSE) +
#gghighlight(jpm >= 130) +
#geom_text(vjust = 0, nudge_y = 1.0) +
# geom_text_repel(aes(label = as.character(start_time)),
#                  box.padding   = 0.35,
#                  point.padding = 0.5,
#                  segment.color = 'grey50'
# ) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Goal is min of 10 min. continuous jumping per session",
y = "Average heart rate (bpm)",
x = "Jumps per minute",
color = "Date")
q
# ggplotly(q) %>%
# layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
#                                   '<br>',
#                                   '<sup>',
#                                   "Goal is min of 10 min. continuous jumping per session",
#                                   '</sup>')))
# Plot avg HR vs. number of jumps colored by time.
r <-
ggplot(jumpData, aes(jumps, avg_heart_rate, color = start_time#,
# label  = jpm,
# label2 = start_time,
# label3 = max_heart_rate,
# label4 = total_training_effect,
# label5 = jumpingEffect
)
) +
geom_point() +
gghighlight(jumps >= 1000) +
geom_smooth(method = lm, se = FALSE) +
# geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
subtitle = "Sessions with higher number of jumps highlighted",
x = "Jumps",
y = "Average heart rate (bpm)",
color = "Date")
r
# ggplotly(r) %>%
# layout(title = list(text = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days",
#                                   '<br>',
#                                   '<sup>',
#                                   "Sessions with higher number of jumps highlighted",
#                                   '</sup>')))
# Plot avg HR vs. jumping efficiency colored by time.
s <-
ggplot(jumpData, aes(jumpingEffect, avg_heart_rate, color = start_time,
label  = jpm,
label2 = max_heart_rate,
label3 = total_training_effect)) +
geom_point() +
#gghighlight(jumpingEffect >= 20) +
#geom_smooth(method = lm, se = FALSE) +
#geom_text(vjust = 0, nudge_y = 1.0) +
labs(title = glue("Assessing cardio fitness over time from jumping rope over {length(sessions)} days"),
#subtitle = "Jumping effect data >= 20 highlighted",
x = "Jumping Effect",
y = "Average heart rate (bpm)",
color = "Date")
ggplotly(s) %>%
layout(title = list(text = glue("Change in cardio fitness over time from jumping rope over {length(sessions)} days",
'<br>',
'<sup>',
#"Jumping effect data >= 20 highlighted",
'</sup>'))
)
# Load in all helper functions
source("~/GitHub/myBlog/content/resources/2020-06-14-heat-training-continues-in-hua-hin/RPIandHeatLimitedPacePlots.R")
# Lalitpur Running
dataLalitpur <- getRPIandHLPfromFIT(wd = "~/HealthData/FitFiles/working/", aname = "Lalitpur")
cleanup()
humidity  <-
tribble(
~Date,	~humidity,
"2020-01-12", 93,
"2020-08-10", 89,
"2020-08-11", 100,
"2020-08-13", 100,
"2020-08-16", 100,
"2020-08-18", 100
)
dataLalitpur <- addHI(dataLalitpur, humidity)
plotRPI(dataLalitpur %>% filter(Date > "2020-08-01"), titleText = "Lalitpur Summer 2020 training runs.")
dataLalitpur %>%
filter(Date > "2020-08-01") %>%
group_by(Date) %>%
summarise(AvgRPI = round(mean(RPI, na.rm = T))) %>%
kable() %>%
kable_styling(full_width = F, position = "center")
